package com.spring.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.spring.dto.BoardVO;
import com.spring.service.BoardDAO;




@Controller
@RequestMapping("/board/*")
public class BoardController {
	
	private BoardDAO dao;
	
	@Autowired
	public BoardController(BoardDAO dao) {
		this.dao = dao;
	}
	
	@ModelAttribute("cp")
	public String getContextPath(HttpServletRequest request) {
		return request.getContextPath();
	}
	
	@RequestMapping(value = "/board/boardList")
	public String boardList(HttpServletRequest request, Model model) {
		System.out.println("==== boardList() ====");
		
		int pageSize = 3;
		
		int currentPage = 1;
		if(request.getParameter("pageNum") != null) {
			currentPage = Integer.parseInt(request.getParameter("pageNum"));	
		}
		
		int count = dao.getAllCount();
			
		int startRow = (currentPage - 1) * pageSize;
	
		List<BoardVO> boardList = dao.getAllBoard(startRow, pageSize);
		
		int number = count - (currentPage - 1) * pageSize;	
		
		int clickablePageCount = 5;
		int pageCount = count / pageSize + (count % pageSize == 0 ? 0 : 1);
		
		int startPage = 0;
		if(currentPage % clickablePageCount != 0) {
			startPage = (currentPage / clickablePageCount) * clickablePageCount + 1;
		}else {
			startPage = (currentPage / clickablePageCount - 1) * clickablePageCount + 1;
		}
		
		int endPage = startPage + clickablePageCount - 1;
		if(endPage > pageCount) endPage = pageCount;
		
		model.addAttribute("boardList", boardList);
		model.addAttribute("number", number);
		model.addAttribute("count", count);
		model.addAttribute("currentPage", currentPage);
		model.addAttribute("pageSize", pageSize);
		
		model.addAttribute("clickablePageCount", clickablePageCount);
		model.addAttribute("pageCount", pageCount);
		model.addAttribute("startPage", startPage);
		model.addAttribute("endPage", endPage);

		return "board/boardList";
	}
	
	@RequestMapping(value = "/board/boardInfo")
	public String boardInfo(HttpServletRequest request, Model model) {
		System.out.println("==== boardInfo() ====");
		
		int num = Integer.parseInt(request.getParameter("num"));
		
		BoardVO bean = dao.getOneBoard(num);
		
		model.addAttribute("bean", bean);
		
		return "board/boardInfo";
	}
	
	@RequestMapping(value = "/board/boardWriteForm")
	public String boardWriteForm() {
		System.out.println("==== boardWriteForm() ====");
		
		return "board/boardWriteForm";
	}
	
	@RequestMapping(value = "/board/boardWritePro", method = RequestMethod.POST)
	public String boardWritePro(HttpServletRequest request, Model model, BoardVO bean) {
		System.out.println("==== boardWritePro() ====");
		
	
		int ref = dao.getRef()+1;
		model.addAttribute("ref", ref);
		dao.insertBoard(bean,ref);
		
		model.addAttribute("bean", bean);
		
		return "redirect:/board/boardList";
	}

	@RequestMapping(value = "/board/reWriteForm")
	public String reWriteForm(HttpServletRequest request, Model model) {
		System.out.println("==== reWriteForm() ====");
		
		int num = Integer.parseInt(request.getParameter("num"));
		BoardVO bean = dao.getOneBoard(num);
		
		int ref = bean.getRef();
		int re_step = bean.getRe_step();
		int re_level = bean.getRe_level();
		
		
		model.addAttribute("ref", ref);
		model.addAttribute("re_step",re_step);
		model.addAttribute("re_level", re_level);
		
		return "board/reWriteForm";
	}
	
	@RequestMapping(value = "/board/reWritePro", method = RequestMethod.POST)
	public String reWritePro(HttpServletRequest request, Model model, BoardVO bean) {
		System.out.println("==== reWritePro() ====");
		int ref = bean.getRef();
		int re_level = bean.getRe_level();

		dao.setReLevel(ref,re_level);
		dao.reWriteBoard(bean);
		
		return "redirect:/board/boardList";
	}
	
}














